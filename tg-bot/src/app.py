import asyncio
import json
import os

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiokafka import AIOKafkaConsumer
from dotenv import find_dotenv, load_dotenv

import config
from redis_config import RedisSession

load_dotenv(find_dotenv())
from kbds.reply import get_settings_keyboard
from handlers.auth import user_private_router as auth_router

load_dotenv(find_dotenv())

ALLOWED_UPDATES = ["message, edited_message"]

bot_properties = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(default=bot_properties, token=os.getenv("TOKEN"))
bot.my_admins_list = []

storage = MemoryStorage()
# –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Dispatcher –ø–µ—Ä–µ–¥–∞–π—Ç–µ storage:
dp = Dispatcher(storage=storage)

dp.include_router(auth_router)


@dp.message(CommandStart())
async def command_start_handler(message: Message):
    await message.answer(
        """
–ö–æ–Ω–µ—á–Ω–æ, —è –º–æ–≥—É –ø–æ–º–æ—á—å —É–∫—Ä–∞—Å–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–∞–º–∏ –∏ –¥–∞—Ç—å —Å–æ–≤–µ—Ç –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ aiogram –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:

"–ü—Ä–∏–≤–µ—Ç! üëã –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç (–¥–∞–Ω–Ω—ã–µ —Ç–µ –∂–µ, —á—Ç–æ –∏ –Ω–∞ —Å–∞–π—Ç–µ –Ω–∞—à–µ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞), —è –±—É–¥—É –æ–ø–æ–≤–µ—â–∞—Ç—å —Ç–µ–±—è –æ –Ω–∞—á–∞–ª–µ —Ç–≤–æ–∏—Ö –∑–∞–¥–∞—á üöÄ –∏ –æ –∑–∞–¥–∞—á–∞—Ö, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫ –∫–æ–Ω—Ü—É –ø–æ –¥–∞—Ç–µ üìÖ –∏–ª–∏ –æ—Å—Ç–∞–≤—à–µ–º—É—Å—è –≤—Ä–µ–º–µ–Ω–∏ ‚è≥!"
        """,
        reply_markup=get_settings_keyboard(),
    )


async def consume() -> None:
    consumer = AIOKafkaConsumer(
        config.CONSUME_TOPIC,
        bootstrap_servers=config.KAFKA_BOOTSTRAP_SERVERS,
    )
    await consumer.start()
    try:
        async for msg in consumer:
            messages = json.loads(msg.value)
            for telegram_id, serialized in messages.items():
                if serialized.get("task_type") == "new_task":
                    message = (
                        f"–ü—Ä–∏–≤–µ—Ç, {serialized['first_name']}! üåü\n\n"
                        f"–¢–µ–±–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞:\n"
                        f"<b>{serialized['task_name']}</b>\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {serialized['task_description']}\n"
                        f"–ì—Ä—É–ø–ø–∞ –∑–∞–¥–∞—á–∏: {serialized['task_group_name']}\n"
                        f"–ù–∞—á–∞–ª–æ: {serialized['task_start_time']}\n"
                        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {serialized['task_end_time']}\n"
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {serialized['task_duration']} —á–∞—Å–æ–≤.\n"
                    )
                elif serialized.get("task_type") == "deadline_approaching":
                    message = (
                        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ, {serialized['first_name']}!\n\n"
                        f"–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ <b>{serialized['task_name']}</b> —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç!\n"
                        f"–£–±–µ–¥–∏—Å—å, —á—Ç–æ –≤—Å–µ –∏–¥–µ—Ç –ø–æ –ø–ª–∞–Ω—É. –û—Å—Ç–∞–ª–æ—Å—å –Ω–µ —Ç–∞–∫ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.\n"
                    )
                elif serialized.get("task_type") == "task_started_no_activity":
                    message = (
                        f"‚è≥ {serialized['first_name']}, –∫–∞–∂–µ—Ç—Å—è —Ç—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∑–∞–¥–∞—á–µ–π <b>{serialized['task_name']}</b>, –∫–æ—Ç–æ—Ä–∞—è —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!\n"
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∏ –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å—Ä–æ–∫–∏.\n"
                    )

                if message:
                    await bot.send_message(
                        chat_id=int(telegram_id), text=message, parse_mode="HTML"
                    )
    finally:
        await consumer.stop()


async def on_startup(bot):
    # run_param = False
    # if run_param:
    #     await drop_db()
    #
    # await create_db()
    print("")


async def on_shutdown(bot):
    # await drop_db()
    print("")


async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    dp.update.middleware(RedisSession(os.getenv("REDIS_PATH", "redis://localhost")))
    await bot.delete_webhook(drop_pending_updates=True)
    # await bot.delete_my_commands(scope=types.BotCommandScopeAllPrivateChats())
    polling = asyncio.create_task(
        dp.start_polling(bot, allowed_updates=ALLOWED_UPDATES)
    )
    consuming = asyncio.create_task(consume())
    await asyncio.gather(polling, consuming)


if __name__ == "__main__":
    asyncio.run(main())
